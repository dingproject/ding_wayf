<?php

/**
 * @file
 *
 *
 * This authentication module is based on idea's from the simpleSAMLAuth module,
 * which can be found at http://code.google.com/p/drupalsimplesaml/.
 *
 */

/**
 * Implementation of hook_perm().
 */
function ding_wayf_perm() {
  return array(
     'configure wayf',
    );
}

/**
 * Implementation of hook_menu().
 */
function ding_wayf_menu() {
  $items = array();

  // Administation interface.
  $items['admin/settings/ding/wayf'] = array(
   'title' => t('Ding! WAYF'),
   'description' => t('Configure Ding! WAYF'),
   'page callback' => 'drupal_get_form',
   'page arguments' => array('ding_wayf_admin_settings_form'),
   'access arguments' => array('configure wayf'),
   'file' => 'includes/ding_wayf.admin.inc',
  );

  // WAYF login callback.
  $items['wayf'] = array(
    'title' => t('Logon to the site'),
    'description' => t('Provides WAYF login.'),
    'page callback' => 'ding_wayf_redirect_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function ding_wayf_redirect_login() {
  global $user;

  // Load configuration, if not defined, set default values.
  $config = variable_get('ding_wayf', array());
  if (empty($config)) {
    drupal_set_message(t('The WAYF login module is not configured yet, plase contact the site administrator.'), 'error', FALSE);
    drupal_goto('<front>');
  }

  // Load simple saml php.
  require_once($config['installdir'] . '/lib/_autoload.php');

  // TODO: Test for simple saml php version

  // Check if user is already logged in, if not continue with wayf.
  if ($user->uid == 0) {
    // Get saml connection.
    $saml = ding_wayf_get_saml_connection($config['sp']);

    // User is not logged into drupal, check wayf
    if ($saml->isAuthenticated()) {
      // Get credentials to log into Ding! provider.
      $saml_attributes = $saml->getAttributes();
      if (isset($saml_attributes)) {
        if (isset($saml_attributes[$config['attribute']]) && !empty($saml_attributes[$config['attribute']])) {
          $auth_name = ding_wayf_get_credentials($saml_attributes[$config['attribute']], $config['attribute_field']);
          if ($auth_name) {
            $creds = array(
              'name' => ding_wayf_get_credentials($saml_attributes[$config['attribute']], $config['attribute_field']),
              'pass' => $config['default'],
            );
          }
        }
      }

      // XXXX HACK HACK DEBUG DEBUG DEBUG DEBUG  HACK HACK XXXX
      $creds['name'] = '3207795622';
      // XXXX HACK HACK DEBUG DEBUG DEBUG DEBUG  HACK HACK XXXX

      // Login into the drupal site, using ding_library_user abstraction layer.
      ding_wayf_login($creds);

      // Send the user to her/his user page.
      drupal_goto('user/' . $user->uid . '/status');
      return;
    }
    else {
      $saml->requireAuth();
    }
  }

  // Send the user to her/his user page.
  drupal_goto('user/' . $user->uid . '/status');
  return;
}



/**
 * Login a wayf user, as thay where logged in by the library system.
 */
function ding_wayf_login($creds) {
  global $user;

  $auth_res = ding_provider_invoke('user', 'authenticate', $creds['name'], $creds['pass']);

  if (!is_array($auth_res) || !isset($auth_res['result'])) {
    watchdog('ding_wayf', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
    ding_wayf_logout();
  }

  if ($auth_res['result']) {
    if (isset($auth_res['authname']) && !empty($auth_res['authname'])) {
      // If provider supplied an authname, use it.
      $auth_name = $auth_res['authname'];
    }
    else {
      // Else use a standard authname.
      $auth_name = ding_library_user_default_authname('test hack test');
    }
    // This sets the proper global $user.
    user_external_login_register($auth_name, 'ding_library_user');

    // Let authenticate module provide some properties for the $user
    // object. Thus they can set properties that gets used in
    // hook_user('login').
    if (isset($auth_res['user'])) {
      foreach ($auth_res['user'] as $key => $value) {
        $user->$key = $value;
      }
    }

    // Finalize login.
    user_authenticate_finalize($creds);

    // user_authenticate_finalize above just regenerated the session, so we've
    // waited until now to stuff things in it.
    if (isset($auth_res['creds'])) {
      $_SESSION['ding_library_user_creds'][$user->uid] = $auth_res['creds'];
    }
    if (ding_provider_supports('user', 'authenticate finalize')) {
      ding_provider_invoke('user', 'authenticate finalize', $user);
    }
  }
  else {
    if (isset($auth_res['messages'])) {
      foreach ($auth_res['messages'] as $message) {
        if (is_array($message)) {
          list($message, $type) = $message;
        } else {
          $type = 'warning';
        }
        drupal_set_message($message, $type);
      }
    }
  }
}

function ding_wayf_logout() {
  $config = variable_get('ding_wayf', array());
  if (empty($config)) {
    // No configuration found, so user can't be logged in with wayf.
    return;
  }

  // Load simple saml php.
  require_once($config['installdir'] . '/lib/_autoload.php');

  // Get saml connection.
  $saml = ding_wayf_get_saml_connection($config['sp']);

  // User is not logged into drupal, check wayf
  if ($saml->isAuthenticated()) {
    $config = SimpleSAML_Configuration::getInstance();
    $msg = 'with_slo';

    try {
      $slo = $config->getString('SingleLogoutService');
    } catch (Exception $e) {
      $msg = "no_slo";
    }
    $saml->logout('/?msg=' . $msg);
  }
}

function ding_wayf_get_credentials($data, $field) {
  return substr($data[0], strpos($data[0], $field) + strlen($field) + 1);
}

function ding_wayf_get_saml_connection($sp) {
  return new SimpleSAML_Auth_Simple($sp);
}

function ding_wayf_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'logout') {
    ding_wayf_logout();
  }
}